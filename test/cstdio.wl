int EOF = -1;
char^ P_tmpdir = "/tmp";

int SEEK_SET = 0;
int SEEK_CUR = 1;
int SEEK_END = 2;

struct FILE;
struct _IO_FILE;
extern _IO_FILE^ stdin;
extern _IO_FILE^ stdout;
extern _IO_FILE^ stderr;

int rename(char^ oldname, char^ newname);
int renameat(int fd, char^ oldnm, int newfd, char ^newnm);
FILE^ tmpfile();
//FILE^ tmpfile64();
char^ tmpnam(char^ s);
char^ tmpnam_r(char^ s);
char^ tempnam(char ^dir, char^ pfx);

int fclose(FILE^ stream);
int fflush(FILE^ stream);
int fflush_unlocked(FILE^ stream);
int fcloseall();
FILE^ fopen(char^ filenm, char^ modes);
FILE^ freopen(char^ filenm, char^ modes);
void setbuf(FILE^ stream, char^ buf);
int setvbuf(FILE^ f, char^ buf, long sz);
int printf(char ^fmt, ...);
int sprintf(char ^s, char^ fmt, ...);
int snprintf(char ^s, long maxlen, char^ fmt, ...);
int fscanf(FILE ^stream, char^ fmt, ...);
int scanf(char^ fmt, ...);
int fgetc(FILE ^stream);
int getc(FILE ^stream);
int getchar();
int fputc(int c, FILE^ stream);
int putc(int c, FILE^ stream);
int putchar(int c);
char^ fgets(char^ s, int n, FILE^ stream);
char^ gets(char^ s);
int fputs(char ^s, FILE^ stream);
int puts(char^ s);
int ungetc(int c, FILE^ stream);
long fread(void^ ptr, long sz, long n, FILE^ stream);
long fwrite(void^ ptr, long sz, long n, FILE^ stream);
int fseek(FILE^ stream, long off, int whence);
long ftell(FILE ^stream);
void rewind(FILE ^stream);
int feof(FILE^ stream);
int ferror(FILE^ stream);
int fileno(FILE ^stream);
