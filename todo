set member class types and arrays to zero

? recursive types (types that contain references to each other) crash things

rearange class members largest to smallest (for packing efficiency)

warn of invalid use of local if function member

allocating class on stack does not set vtable

"[int, int]^ tup; tup++" breaks things (eg, passing tuple by reference)

unions do not take into account class lifetime

check for index void^

select tuple constant type dependant on context (eg [int, int] instead of [long, long] if needed)
    (problem noticed in function call parameter)

make function arguments const

exceptions?

exception if stackAlloc class has refcount > 1 on scope end

static class members should require a 'dot'

static members will sometimes not be validated correctly if member type is declared after use

""""
    the following compiles, but fails in llvm linking:

    Block[] blocks
    block.ptr = malloc(Block.sizeof)
""""

validate target of idOps. (delete, retain, release).

OR on constants promotes to floating point?

on 'new', check for expected number of arguments

on binary expression, validate types before codegen

allow pointer arithmatic (void^ + int). (currently fails in llc)

index[] on struct segfaults (found on mat4)

add a syntax for all basic c functionality:
    memcpy, memset, strlen, strdup, assert, atof, exit... etc

'memcpy' syntax?:
    dst[] = src[0..10]

'memset'?:
    dst[0..x] = 0
    dst[] = 0

'strlen':
    arr.size

'strdup'?

'assert'?

'atof':
    tofloat(str)
    
'exit':
    die?
    throw?
